class Solution {
    public int minFlips(int a, int b, int c) {
        int flips = 0;
        
      
        for (int i = 0; i < 32; i++) {
          // >> left shift
            int bitA = (a >> i) & 1;
            int bitB = (b >> i) & 1;
            int bitC = (c >> i) & 1;
            
            if (bitC == 0) {
        
                if (bitA == 1 && bitB == 1) {
                    flips += 2;
                } else if (bitA == 1 || bitB == 1) {
                    flips++;                }
            } else {
            
                if (bitA == 0 && bitB == 0) {
                    flips++;                }
            }
        }
        
        return flips;
    }
}


//------------------------------------------------------------------------------------------------------

class Solution {
    public int minFlips(int a, int b, int c) {
        int ans = 0;
        while (a != 0 || b != 0 || c != 0) {
            // get first bit LSB 
            int x1 = a & 1;
            int x2 = b & 1;
            int x3 = c & 1;

            // check bitwise OR operation. 
            if ((x1 | x2) != x3) {

                // if (x1 & x2) is 1 that means both bit change 
                if ((x1 & x2) == 1)
                    ans += 2;

                // one bit are change    
                else
                    ans += 1;
            }
            a = a >> 1;
            b = b >> 1;
            c = c >> 1;
        }
        return ans;
    }
}
