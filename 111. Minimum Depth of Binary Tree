class Solution {
    public int minDepth(TreeNode root) {
  if (root == null) {
            return 0;
        }
 
        // If the current node is a leaf, return 1
        if (root.left == null && root.right == null) {
            return 1;
        }

        // If the left subtree is null, recursively find the minimum depth of the right subtree
        if (root.left == null) {
            return minDepth(root.right) + 1;
        }

        // If the right subtree is null, recursively find the minimum depth of the left subtree
        if (root.right == null) {
            return minDepth(root.left) + 1;
        }

        // If both subtrees exist, recursively find the minimum depth of both subtrees and take the minimum
        int leftDepth = minDepth(root.left);
        int rightDepth = minDepth(root.right);
        return Math.min(leftDepth, rightDepth) + 1;
}
}
